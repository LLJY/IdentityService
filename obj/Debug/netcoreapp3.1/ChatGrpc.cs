// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/chat.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ChatService.Protos {
  public static partial class Chat
  {
    static readonly string __ServiceName = "services.Chat";

    static readonly grpc::Marshaller<global::ChatService.Protos.UserEventsRequest> __Marshaller_services_UserEventsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChatService.Protos.UserEventsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChatService.Protos.UserEventsResponse> __Marshaller_services_UserEventsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChatService.Protos.UserEventsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChatService.Protos.NewMessagesRequest> __Marshaller_services_NewMessagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChatService.Protos.NewMessagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChatService.Protos.NewMessagesResponse> __Marshaller_services_NewMessagesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChatService.Protos.NewMessagesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChatService.Protos.AllMessagesRequest> __Marshaller_services_AllMessagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChatService.Protos.AllMessagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ChatService.Protos.AllMessagesResponse> __Marshaller_services_AllMessagesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ChatService.Protos.AllMessagesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::ChatService.Protos.UserEventsRequest, global::ChatService.Protos.UserEventsResponse> __Method_GetUserEvents = new grpc::Method<global::ChatService.Protos.UserEventsRequest, global::ChatService.Protos.UserEventsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUserEvents",
        __Marshaller_services_UserEventsRequest,
        __Marshaller_services_UserEventsResponse);

    static readonly grpc::Method<global::ChatService.Protos.NewMessagesRequest, global::ChatService.Protos.NewMessagesResponse> __Method_GetNewMessages = new grpc::Method<global::ChatService.Protos.NewMessagesRequest, global::ChatService.Protos.NewMessagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNewMessages",
        __Marshaller_services_NewMessagesRequest,
        __Marshaller_services_NewMessagesResponse);

    static readonly grpc::Method<global::ChatService.Protos.AllMessagesRequest, global::ChatService.Protos.AllMessagesResponse> __Method_GetAllMessages = new grpc::Method<global::ChatService.Protos.AllMessagesRequest, global::ChatService.Protos.AllMessagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllMessages",
        __Marshaller_services_AllMessagesRequest,
        __Marshaller_services_AllMessagesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ChatService.Protos.ChatReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Chat</summary>
    [grpc::BindServiceMethod(typeof(Chat), "BindService")]
    public abstract partial class ChatBase
    {
      public virtual global::System.Threading.Tasks.Task GetUserEvents(global::ChatService.Protos.UserEventsRequest request, grpc::IServerStreamWriter<global::ChatService.Protos.UserEventsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChatService.Protos.NewMessagesResponse> GetNewMessages(global::ChatService.Protos.NewMessagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ChatService.Protos.AllMessagesResponse> GetAllMessages(global::ChatService.Protos.AllMessagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUserEvents, serviceImpl.GetUserEvents)
          .AddMethod(__Method_GetNewMessages, serviceImpl.GetNewMessages)
          .AddMethod(__Method_GetAllMessages, serviceImpl.GetAllMessages).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetUserEvents, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ChatService.Protos.UserEventsRequest, global::ChatService.Protos.UserEventsResponse>(serviceImpl.GetUserEvents));
      serviceBinder.AddMethod(__Method_GetNewMessages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ChatService.Protos.NewMessagesRequest, global::ChatService.Protos.NewMessagesResponse>(serviceImpl.GetNewMessages));
      serviceBinder.AddMethod(__Method_GetAllMessages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ChatService.Protos.AllMessagesRequest, global::ChatService.Protos.AllMessagesResponse>(serviceImpl.GetAllMessages));
    }

  }
}
#endregion
